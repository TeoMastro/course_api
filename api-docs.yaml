openapi: 3.0.0
info:
  title: Course REST API
  description: A RESTful CRUD API for managing courses with pagination, validation, and soft deletes
  version: 1.0.0
  contact:
    name: Course API Support
    email: support@example.com

servers:
  - url: http://localhost:80/api
    description: Local development server
  - url: https://your-domain.com/api  
    description: Production server

paths:
  /courses:
    get:
      summary: Retrieve a paginated list of courses
      description: Returns a paginated list of all active (non-deleted) courses
      parameters:
        - name: per_page
          in: query
          description: Number of courses per page (1-100)
          required: false
          schema:
            type: integer
            default: 15
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Successfully retrieved courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
              example:
                success: true
                data:
                  - id: 1
                    title: "Laravel Fundamentals"
                    description: "Learn the basics of Laravel framework"
                    status: "Published"
                    is_premium: false
                    created_at: "2025-10-04T12:00:00.000000Z"
                    updated_at: "2025-10-04T12:00:00.000000Z"
                meta:
                  current_page: 1
                  last_page: 2
                  per_page: 15
                  total: 25
                  from: 1
                  to: 15
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new course
      description: Creates a new course with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreate'
            example:
              title: "Advanced PHP Concepts"
              description: "Deep dive into advanced PHP programming"
              status: "Published"
              is_premium: true
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course created successfully"
                  data:
                    $ref: '#/components/schemas/Course'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /courses/{id}:
    get:
      summary: Retrieve a specific course
      description: Returns details of a specific course by ID
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Course found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Course'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update an existing course
      description: Updates an existing course with partial or complete data
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdate'
            example:
              title: "Updated Course Title"
              status: "Published"
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course updated successfully"
                  data:
                    $ref: '#/components/schemas/Course'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Soft delete a course
      description: Marks a course as deleted (soft delete) without removing it from the database
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the course
          example: 1
        title:
          type: string
          description: Course title
          example: "Laravel Fundamentals"
        description:
          type: string
          nullable: true
          description: Course description
          example: "Learn the basics of Laravel framework"
        status:
          type: string
          enum: [Published, Pending]
          description: Course publication status
          example: "Published"
        is_premium:
          type: boolean
          description: Whether the course requires premium access
          example: false
        created_at:
          type: string
          format: date-time
          description: Course creation timestamp
          example: "2025-10-04T12:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          description: Course last update timestamp
          example: "2025-10-04T12:00:00.000000Z"
      required:
        - id
        - title
        - status
        - is_premium
        - created_at
        - updated_at

    CourseCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          description: Course title
          example: "Advanced PHP Concepts"
        description:
          type: string
          nullable: true
          description: Course description
          example: "Deep dive into advanced PHP programming"
        status:
          type: string
          enum: [Published, Pending]
          description: Course publication status
          example: "Published"
        is_premium:
          type: boolean
          description: Whether the course requires premium access
          example: true
      required:
        - title
        - status
        - is_premium

    CourseUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          description: Course title
          example: "Updated Course Title"
        description:
          type: string
          nullable: true
          description: Course description
          example: "Updated course description"
        status:
          type: string
          enum: [Published, Pending]
          description: Course publication status
          example: "Published"
        is_premium:
          type: boolean
          description: Whether the course requires premium access
          example: false

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          description: Current page number
          example: 1
        last_page:
          type: integer
          description: Last page number
          example: 5
        per_page:
          type: integer
          description: Number of items per page
          example: 15
        total:
          type: integer
          description: Total number of items
          example: 67
        from:
          type: integer
          nullable: true
          description: First item number on current page
          example: 1
        to:
          type: integer
          nullable: true
          description: Last item number on current page
          example: 15

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
        error:
          type: string
          description: Detailed error information
          nullable: true

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            title: ["The course title is required."]
            status: ["The selected status is invalid. Must be Published or Pending."]

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Course not found"

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Failed to retrieve courses"
            error: "Database connection failed"

tags:
  - name: courses
    description: Course management operations
